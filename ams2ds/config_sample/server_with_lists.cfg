"//" : "You can use dummy entries like this to write comments into the config. 'rem' and '#' are also supported as comment entries."
// But in recent version of the server, standard C++ like one-liner comments are supported as well.

//////////////////////////
// Basic server options //
//////////////////////////

// Logging level of the server. Messages of this severity and more important will be logged. Can be any of debug/info/warning/error.
logLevel : "info"

// Number of gameplay events stored on the server. Oldest ones will be discarded once the game logs more.
eventsLogSize : 10000

// The server's name, this will appear in server browser (when implemented) and will be also the default name of sessions hosted on the server.
name : "Unconfigured local testing server"

// Authenticate users with Steam to check VAC ban when set to true.
secure : true

// Password required to create sessions on the server as well as to join the sessions, password set in Create options is ignored on DS.
password : ""

// Maximum size of sessions that can be created on this server.
// Note that setting this above 16 will allow sessions unjoinable by 32-bit clients to be created on the server.
// The game also currently does not support sessions larger than 32, even if the server can be configured for up to 64 players.
maxPlayerCount : 64

// IP address where the server's sockets should be bound. Leave empty for 'all interfaces'.
bindIP : ""

// ports used to communicate with Steam and game, they must all be accessible on the public IP of the server.
steamPort : 8766
hostPort : 27015
queryPort : 27016

// Delay between server ticks in milliseconds, when not hosting and when hosting a game, respectively.
// Lower values will make the server more responsible and decrease latency by a bit at the expense of higher CPU usage.
sleepWaiting : 50
sleepActive : 10

// Sports Play will use system sockets instead of Steam networking API. Recommended for offline LAN-only events.
// Use cmdline switch -sportsplay serverIp:hostPort on client to host and join games on sportsPlay server.
sportsPlay: false

///////////////////////////
// Server access control //
///////////////////////////

// NOTE: Usually you do not want to have these in your config, this is just a sample.
// Especially the whitelist as used here will allow only one user with Steam ID onto this server 76561197994111033.
// Use this as an example and modify the lists accordingly (most likely remove the whitelist entry completely),
// or use sample server.cfg instead if you do not care about blacklisting/whitelisting.

// Black list
// Anyone in this list will not be allowed into the server.
// You can use array or map/object. If the value is an object, the keys are ignored, but you can used the strings as comments with name or reason for being in the list.
// If the value is an integer, it's interpreted as a Steam ID of the blacklisted user.
// If it's a string, it's file from which the black list is loaded. The file can contain either an array or an object just like this one, and can reference more files.
// Here we just load the list from file "blacklist.cfg"
blackList : [ "blacklist.cfg" ]

// White list
// If this is not empty only whitelisted members will be allowed into the server. In that case the black list is ignored.
// Usually you don't want to have this set at all and use passwords instead, but if you prefer to control server access by whitelisting instead, keep this in and enter the right IDs.
// You can use array or map/object. If the value is an object, the keys are ignored, but you can used the strings as comments with name or reason for being in the list.
// If the value is an integer, it's interpreted as a Steam ID of the whitelisted user.
// If it's a string, it's file from which the white list is loaded. The file can contain either an array or an object just like this one, and can reference more files.
// Here we load the list from file "whitelist.cfg", and also allow user with Steam ID 76561197994111033.
whiteList : { "whitelist" : "whitelist.cfg", "Stouie" : 76561197994111033 }


///////////////////////////
// HttpApi configuration //
///////////////////////////

// This provides http-based API and basic web-based controls using a built-in http server.
// HttpApi is disabled by default, and if you enable it with everything else left to default it will listen only locally on 127.0.0.1:9000

// Master enable/disable toggle.
enableHttpApi : false

// Similar to logLevel above but used only for libwebsockets output.
// Note that all logging still goes through the main filter, so you won't be able to use more verbose logging here than the main level.
httpApiLogLevel : "warning"

// Interface name or IP where to bind the local http server providing the API and web-based controls.
// This is the textual name of the interface as assigned by your OS, or IP address of the interface.
// The default value is "127.0.0.1", change it to an empty string to bind the listen socket to all available interfaces.
httpApiInterface : "127.0.0.1"

// Port where the local http server listens.
httpApiPort : 9000

// Map with extra HTTP headers to add to HTTP API responses.
// The keys are the conditions for adding the headers, the values are the headers to add.
// There are no conditions supported yet, so just use "*" for a generic wildard for now, that will match everything in the future too.
httpApiExtraHeaders : {
    "*" : "Access-Control-Allow-Origin: *"
}

// Http API access level overrides.
// Each HTTP API endpoint defines its default access level, usually one of "public", "private" or "admin".
// This map can override these levels to anything else. The keys are wildcard endpoint paths, and the values are the
// access levels to use. The first path that matches will be used, processing them in the order as written here.
// The wildcard patterns are case-sensitive and can contain:
// - '*': matches 0 or more characters
// - '%': matches 0 or more characters except for forward slash
// - '?': matches 1 character
httpApiAccessLevels : {
    // The default is empty, using defaults as defined by the endpoints themselves.

    // But you could for example use this to change all access levels to public (not recommended!)
    // "*" : "public"

    // Or this to hide the status from public
    // "" : "private"
    // "status" : "private"

    // And similar to hide the help and lists from public
    // "api/help" : "private"
    // "api/list*" : "private"

    // As you can see from the example above, the paths should be written with no initial or trailing slashes.
}

// Filtering rules for the access levels.
// The default access levels are "public", "private" and "admin", but the httpAccessLevels above can define any additional levels.
// This map then tells the server who has access to which level. It's a map from level names to filtering rules.
//
// Filtering rules are then specified as a list of structures, processed in the order as written in the config.
// Each rule structure contains a type" and then type-specific fields. The supported types are:
// - "accept": Accept this request, no additional checks.
// - "reject": Reject this request, no additional checks.
// - "reject-password": Reject this request and let the client know that a password is required, no additional checks.
// - "ip-accept": Accept this request if it matches the "ip" mask in CIDR notation (for example, "192.168.1.0/24")
// - "ip-reject": Reject this request if it matches the "ip" mask in CIDR notation (for example, "192.168.1.0/24")
// - "user": Accept this request if it authenticates as given "user".
// - "group" : Accept this request if it authenticates as given "group".
//
// User/group authentication is done using the standard HTTP basic access authentication (https://en.wikipedia.org/wiki/Basic_access_authentication).
httpApiAccessFilters : {

    // Public rules. The default is to accept everything.
    "public" : [
        { "type" : "accept" }
    ],

    // Private rules. The default is to accept queries from localhost, queries authenticated as users in the "private" group
    // and to reject anything else.
    "private" : [
        { "type" : "ip-accept", "ip" : "127.0.0.1/32" },
        { "type" : "group", "group" : "private" },
        { "type" : "reject-password" }
    ],

    // Admin rules. The default is to accept queries from localhost, queries authenticated as users in the "admin" group
    // and to reject anything else.
    "admin" : [
        { "type" : "ip-accept", "ip" : "127.0.0.1/32" },
        { "type" : "group", "group" : "admin" },
        { "type" : "reject-password" }
    ],

}

// User list. Map from user names to passwords, in plain text.
httpApiUsers : {
    // "stepan" : "foo",
    // "michal" : "bar",
}

// User groups. Map from group names to lists of users in said groups.
httpApiGroups : {
    // "private" : [ "stepan", "michal" ],
    // "admin" : [ "stepan" ],
}

// Root directory where the static files for the web tool are located. Relative to current directory.
staticWebFiles: "web_files"


//////////////////////////
// LuaApi configuration //
//////////////////////////

// Lua API allows the server to be extended by in-server scripting in Lua.
// The server is running Lua version 5.3, currently with no sandboxing applied to the add-ons. All standard Lua library functions are available.

// WARNING: The LuaApi is not final and the following breaking changes are planned soon:
// - Rename Lua addon metadata files from *.txt to *.json
// - Remove default config from the metadata and put it into separate file *_default_config.json
// - Separate config and persistent data, so that data saved by addons will not pollute the config files, and the config files will retain all comments from the default files.

// Master enable/disable toggle.
enableLuaApi : true

// Root directory from which the Lua addons are loaded. Relative to current directory if it's not absolute.
luaAddonRoot: "lua"

// Root directory where the addon configs will be stored if written out by addons. Default configs are defined in the addon base text files.
luaConfigRoot: "lua_config"

// Root directory where the addon output will be written, once supported. For now the io functions can write anywhere, but this will be limited to this directory in the future.
luaOutputRoot: "lua_output"

// Names of all Lua addons to load. The addons will be loaded in the specified order. Each addon can list other addons as its dependencies, which attempt to load those first.
// The server will load addons from directory specified in "luaAddonRoot", loading of each addon will start by loading its config from ADDON_NAME/ADDON_NAME.txt
luaApiAddons : [

    // Core server bootup scripts and helper functions. This will be always loaded first even if not specified here because it's an implicit dependency of all addons.
    "sms_base",

    // Automatic race setup rotation.
    "sms_rotate",

    // Sends greetings messages to joining members, optionally with race setup info, optionally also whenever returning back to lobby post-race.
    "sms_motd",

    // Tracks various stats on the server - server, session and player stats.
    "sms_stats",
]

// Names of all lua libraries that are allowed to be used by any addons.
luaAllowedLibraries : [

    "lib_rotate"
]


////////////////////////////////
// Game setup control options //
////////////////////////////////

// Set to true to make this server show up in the browser even if it's empty.
allowEmptyJoin : true

// Set to true to enable API that allows the server to control the game's setup. The host will not be able to control the setup if this is set.
// Set to true to enable API that allows the server to control the game's setup. The host will not be able to control the setup if this is set.
// This must be set to "true" for the following attributes to work: ServerControlsTrack, ServerControlsVehicleClass, ServerControlsVehicle
controlGameSetup : false

// Initial attribute values, see /api/list/attributes/session for the full list.
// These attributes will be used when joining an empty server via the borwser (if allowEmptyJoin is true) and as the intial attributes for the set_attributes and set_next_attributes APIs (if controlGameSetup is true)
// The defaults set these values:
sessionAttributes : {
    // The host player can control track selection if set to 0. Set to 1 to disable track selection in the game.
    "ServerControlsTrack" : 0,

    // The host player can change the vehicle class by going through the garage if set to 0. Set to 1 to disallow players changing the class.
    // Flag FORCE_SAME_VEHICLE_CLASS (1024) should be also set for this to make sense, otherwise players are able to choose cars from any class.
    "ServerControlsVehicleClass" : 0,

    // Players can change their vehicle if set to 0. Set to 1 to disallow players changing the vehicle.
    // Flag FORCE_IDENTICAL_VEHICLES (2) should be also set for this to make sense.
    "ServerControlsVehicle" : 0,

    // Grid size up to 32, all reserved to players, so no AI.
    // Note that 32-bit clients will not be able to join the game if this is larger than 16.
    "GridSize" : 24,
    "MaxPlayers" : 24,

    // Just 3 race laps.
    "PracticeLength" : 0,
    "QualifyLength" : 0,
    "RaceLength" : 3,

    // Race flags - bitfield consisting of many flags, the default is set like this:
    // ALLOW_CUSTOM_VEHICLE_SETUP (8) + ABS_ALLOWED (32) + SC_ALLOWED (64) + TCS_ALLOWED (128) + "
    // FORCE_SAME_VEHICLE_CLASS (512) + FILL_SESSION_WITH_AI (131072) + AUTO_START_ENGINE (524288) = 656106"
    // See /api/list/flags/session in HTTP API, or globals "lists.flags.session" or "SessionFlags" in Lua API for the full list.
    "Flags" : 656106,

    // AI opponent difficulty, from 0 to 100. Applies only on loading if GridSize is larger than MaxPlayers, and the FILL_SESSION_WITH_AI flag is enabled.
    "OpponentDifficulty" : 50,

    // Visual only damage
    "DamageType" : 1,

    // No tire wear.
    "TireWearType" : 8,

    // Fuel usage off.
    "FuelUsageType" : 2,

    // Penalties on.
    "PenaltiesType" : 1,

    // Any camera view allowed.
    "AllowedViews" : 0,

    // Track Brands Hatch Indy. See /api/list/tracks/ in HTTP API or globals "lists.tracks", "id_to_track" or "name_to_track" in Lua API.
    "TrackId" : 1988984740,

    // Vehicle class Road A. See /api/list/vehicle_classes/ in HTTP API or globals "lists.vehicle_classes", "id_to_vehicle_class" or "name_to_vehicle_class" in Lua API.
    "VehicleClassId" : 767810805,

    // Vehicle McLaren 720S (but not forced by default flags). See /api/list/vehicles/ in HTTP API or globals "lists.vehicles", "id_to_vehicle" or "name_to_vehicle" in Lua API.
    "VehicleModelId" : 1106819298,

    // Starting date and time.
    "RaceDateYear" : 2015,
    "RaceDateMonth" : 7,
    "RaceDateDay" : 6,
    "RaceDateHour" : 11,

    // Single weather slot set to "Weather_Clear1". See /api/list/enums/weather in HTTP API or globals "lists.enums.weather" or "Weather" in Lua API.
    "RaceWeatherSlots" : 1,
    "RaceWeatherSlot1" : -934211870,
    "RaceWeatherSlot2" : -934211870,
    "RaceWeatherSlot3" : -934211870,
    "RaceWeatherSlot4" : -934211870,
}
